(()=>{function f(t,e=[],n={}){let o="http://www.w3.org/2000/svg",r=document.createElementNS(o,t);e.forEach(s=>{r.classList.add(s)});for(let[s,c]of Object.entries(n))r.setAttribute(s,c);return r}function x(t,e){let[n,o]=e,r=`M${n[0]},${n[1]} L${o[0]},${o[1]}`,i=f("path",["end"],{d:r,fill:"none",stroke:"black","stroke-width":1});t.appendChild(i)}function y(t,e){let n=`M${e[0][0]},${e[0][1]}`+e.slice(1).map(c=>`L${c[0]},${c[1]}`).join(" "),s=f("path",["level"],{d:n,fill:"white",stroke:"black","stroke-width":1});t.appendChild(s)}function p({intercept:t,slope:e}){return function(n){return e*n+t}}function h(t,e){let n=t.slope,o=e.slope;return n===o?j():Number.isFinite(n)&&Number.isFinite(o)?O(t,e):!Number.isFinite(n)&&o===0||!Number.isFinite(o)&&n===0?T(t,e):P(t,e)}function j(){return null}function O(t,e){let n=t.slope,o=t.intercept,r=e.slope,s=e.intercept,c=1/(n-r);return[c*(s-o),c*(n*s-o*r)]}function P(t,e){let n=t.slope,o=t.intercept,r=e.slope,s=e.intercept;if(!Number.isFinite(n)){let u=p({slope:r,intercept:s})(t.x);return[(u-s)/r,u]}let i=p({slope:n,intercept:o})(e.x);return[(i-o)/n,i]}function T(t,e){let n=t.slope,o=t.intercept,r=e.slope,s=e.intercept;return!Number.isFinite(r)&&n===0?[e.x,o]:!Number.isFinite(n)&&r===0?[t.x,s]:null}function I(t,e){let[n,o]=t,[r,s]=e;return n===r?s<o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY:(o*r-s*n)/(r-n)}function w(t,e){let[n,o]=t,[r,s]=e;return n===r?s<o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY:o===s?0:(s-o)/(r-n)}function m(t,e){let n=w(t,e),o=I(t,e);return Number.isFinite(n)?{intercept:o,slope:n}:{intercept:o,slope:n,x:t[0]}}function E(t,e){let n=h(t,e);return n===null?null:e.slope===0?q(t,e,n):Number.isFinite(e.slope)?R(t,e,n):k(t,e,n)}function q(t,e,n){if(!Number.isFinite(t.slope))return k(t,e,n);let o=p({...t}),[r,s]=n,c=-1/t.slope,i=s-c*r,a=c*(r+1)+i;return m([...n],[r+1,a])}function k(t,e,n){let[o,r]=n,s=-1*t.slope;return{intercept:r-s*o,slope:s,x:t.x}}function R(t,e,n){let o=p({...e}),r=n[0],s=o(r),c=o(r+1);return m([r,s],[r-c,s+1])}function L(t,e,n,o){let r=D(n,o,e),s=`M${r[0][0]},${r[0][1]}`+r.slice(1).map(u=>`L${u[0]},${u[1]}`).join(" "),a=f("path",["light"],{d:s,fill:"none",stroke:"orange","stroke-width":1}),l=a.getTotalLength();a.style.strokeDasharray=`${l} ${l}`,a.style.strokeDashoffset=l,a.getBoundingClientRect(),a.style.transition="stroke-dashoffset 1s linear",t.appendChild(a),setTimeout(()=>a.style.strokeDashoffset="0",500)}function D(t,e,n){let o=[t],r=v(t),s=v(t.map((l,u)=>l+e[u])),c=V(n),i=M(r,s,c),a=100;for(;a--&&i!==null;){o.push(U(i.crosspoint));let l=W(r,i);r=l.from,s=l.to,i=M(r,s,c)}return o}function M(t,e,n){let o=m(t,e),s=n.map((c,i)=>{let a=h({intercept:c.intercept,slope:c.slope,x:c.x},o);return{...c,crosspoint:a,distance:C(a,t),index:i}}).map(c=>{let{crosspoint:i,start:a,end:l}=c,u={x:null,y:null};return i!==null&&(u={x:F(i[0],a[0],l[0]),y:F(i[1],a[1],l[1])}),{...c,within:u}}).filter(c=>c.within.x&&c.within.y).filter(c=>c.distance>0);return s.length===0?null:s.reduce((c,i)=>c.distance<i.distance?c:i)}function v(t){let[e,n]=t;return[e,100-n]}function U(t){let[e,n]=t;return[e,100-n]}function V(t){let e=[];for(let n=0;n<t.length-1;n++){let o=v(t[n]),r=v(t[n+1]),s=m(o,r);e.push({start:o,end:r,length:C(o,r),...s})}return e}function W(t,e){let n=m(t,e.crosspoint),o=E(n,{intercept:e.intercept,slope:e.slope,x:e.x}),r=p({...o}),s=e.crosspoint[0],c=r(s+1);return{from:e.crosspoint,to:[s+1,c]}}function C(t,e){if(!t||!e)return null;let[n,o]=t,[r,s]=e;return Math.round(Math.sqrt(Math.pow(Math.abs(r-n),2)+Math.pow(Math.abs(s-o),2)))}function F(t,e,n){let o=0,r=e<n?Math.round(t)-e>=o:Math.round(t)-n>=o,s=n>e?n-Math.round(t)>=o:e-Math.round(t)>=o;return r&&s}function $(t,e){let n=`M${e[0]},${e[1]} l3,5 h-6Z`,s=f("path",["start"],{d:n,fill:"orange",stroke:"orange","stroke-width":1});t.appendChild(s)}var d=[{name:"Level I",start:[50,89],end:[[45,11],[55,11]],shape:[[49,90],[40,90],[40,10],[60,10],[60,90],[51,90]]},{name:"Level O",start:[40,89],end:[[57,89],[63,89]],shape:[[39,90],[35,90],[30,88],[25,85],[20,80],[15,70],[10,60],[10,40],[15,30],[20,20],[25,15],[30,12],[35,10],[65,10],[70,12],[75,15],[80,20],[85,30],[90,40],[90,60],[85,70],[80,80],[75,85],[65,90],[55,90],[55,70],[65,70],[75,60],[75,40],[65,30],[35,30],[25,40],[25,60],[35,70],[44,70],[44,90],[41,90]]},{name:"Level M",start:[15,89],end:[[82,89],[88,89]],shape:[[14,90],[10,90],[10,20],[20,10],[30,10],[45,70],[55,70],[70,10],[80,10],[90,20],[90,90],[80,90],[80,24],[60,90],[40,90],[20,24],[20,90],[16,90]]},{name:"Level R",start:[15,89],end:[[82,89],[88,89]],shape:[[14,90],[10,90],[30,40],[25,38],[20,35],[15,30],[15,20],[20,15],[25,12],[30,10],[49,10],[50,12],[51,10],[70,10],[75,12],[80,15],[85,20],[85,30],[80,35],[75,38],[70,40],[90,90],[80,90],[60,40],[60,90],[51,90],[51,30],[70,30],[75,25],[70,20],[30,20],[25,25],[30,30],[49,30],[49,90],[40,90],[40,40],[20,90],[16,90]]}];var g=0;z(d.map(t=>t.name));_();S(d[g].name);function z(t){let e=document.getElementById("levels");t.forEach(n=>{let o=document.createElement("li");o.textContent=n,e.appendChild(o)})}function _(){let t=document.getElementById("angle"),e=document.getElementById("form"),n=document.getElementById("levels");t.addEventListener("change",o=>G(o)),e.addEventListener("submit",o=>Z(o)),n.addEventListener("click",o=>X(o))}function G(t){let e=document.querySelector(".start");if(e===null)return;let n=t.target,o=parseInt(n.value,10),{start:r}=d[g],[s,c]=r;e.setAttribute("transform",`rotate(${o}, ${s}, ${c})`),b(),N()}function X(t){let{currentTarget:e,target:n}=t;n.nodeName.toLowerCase()==="li"&&(g=Array.from(e.children).findIndex(o=>o===n),S(n.textContent))}function Z(t){t.preventDefault();let e=document.getElementById("root");b();let{shape:n,start:o}=d[g];L(e,n,o,J()),H(),K(),N()}function S(t){let e=document.getElementById("root"),n=d.find(o=>o.name===t);Q(),y(e,n.shape),$(e,n.start),x(e,n.end),N()}function tt(){let t=document.getElementById("angle");t.value=0}function et(){let t=document.getElementById("attempt");t.value=0}function Q(){tt(),et(),nt(),ot(),rt(),b()}function nt(){let t=document.querySelector(".level");t&&t.remove()}function ot(){let t=document.querySelector(".start");t&&t.remove()}function rt(){let t=document.querySelector(".end");t&&t.remove()}function b(){let t=document.querySelector(".light");t&&t.remove()}function J(){let t=document.getElementById("angle"),e=st(parseInt(t.value,10)-90);return ct({r:1,degree:e})}function H(){let t=document.getElementById("attempt");t.value=parseInt(t.value,10)+1}function st(t){return t*Math.PI/180}function ct(t){let{r:e,degree:n}=t,o=parseFloat((Math.cos(n)/e).toFixed(2)),r=parseFloat((Math.sin(n)/e).toFixed(2));return[o,r]}function N(){let t=document.getElementById("root"),e=document.querySelector('link[rel="icon"]'),o=new XMLSerializer().serializeToString(t).replace(/ id="\w+"/g,"").replace(/ style=".*"/g,"").replace(/ class="\w+"/g,"");e.href="data:image/svg+xml;utf8,"+o}function K(){let t=document.getElementById("attempt"),e=document.querySelector(".light"),n=document.getElementById("share-me"),o=parseInt(t.value,10),r=o!==1?"":"s",s=d[g].name,c=Math.round(e.getTotalLength()),i=encodeURIComponent(['I played "I Really Move On".',`I tried ${s} ${o} time${r}!`,`My score was ${c}.`,"Can you beat me?","","https://ryuno-ki.itch.io/i-really-move-on",""].join(`
`)),{hostname:a,pathname:l,protocol:u}=location,A=`https://twitter.com/intent/tweet?url=${encodeURIComponent(`${u}//${a}${l}`)}&hashtags=gamedevjs&via=AndreJaenisch&text=${i}`;n.href=A}})();
//# sourceMappingURL=data:application/json;base64,
